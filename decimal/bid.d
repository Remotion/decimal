/**
 * A D programming language implementation of the
 * General Decimal Arithmetic Specification,
 * Version 1.70, (25 March 2009).
 *
 * by Paul D. Anderson
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
**/

module decimal.bid;

import decimal.decimal;
import std.bigint;
import std.bitmanip;
import std.stdio;
import std.string;


struct Dec32 {

	package union {
		uint value = qnan;
		mixin (bitfields!(
			uint, "mant1", 23,
			uint, "expo1", 8,
			bool, "sign1", 1
		));
		mixin (bitfields!(
			uint, "mant2", 21,
			uint, "expo2", 8,
			uint, "test", 2,
			bool, "sign2", 1
		));
	}

	immutable uint bias = 101;
	immutable uint mantBits = 23;;
	immutable uint expoBits = 8;
	immutable uint signBits = 1;
	immutable uint testBits = 2;
	immutable uint normBits = mantBits - testBits;

	immutable uint snan = 0x7E000000;
	immutable uint max_snan = 0x7FFFFFFF;
	immutable uint qnan = 0x7C000000;
	immutable uint max_qnan = 0x7dFFFFFF;
	immutable uint inf  = 0x78000000;
	immutable uint max_inf = 0x7BFFFFFF;

	immutable uint max_norm = (1 << normBits) - 1;
	immutable uint max_mant = (1 << mantBits) - 1;
	immutable uint max_expo =   90;
	immutable uint min_expo = -101;

/*	public Dec32 init() {
		return qnan;
	}*/

	/**
	 * Creates a Dec32 from a long integer.
	 */
	public this(const long n) {
		sign1 = n < 0;
		expo1 = 0;
		mant1 = cast(uint)std.math.abs(n);
	}

	/**
	 * Creates a Decimal from this Dec32
	 */
	public this(Decimal num) {
		// check for special values
		if (num.isInfinite) {
			value = inf;
			sign2 = num.sign;
			return;
		}
		if (num.isQuiet) {
			value = qnan;
			sign2 = num.sign;
			return;
		}
		if (num.isSignaling) {
			value = snan;
			sign2 = num.sign;
			return;
		}
		if (num.isZero) {
			value = 0;
			sign2 = num.sign;
			return;
		}

		// number is finite
		if (num.mant > max_mant || num.expo > max_expo || num.expo < min_expo) {
			throw new Exception("Can't fit in this struct!");
		}

		uint mant = cast(uint)num.mant.toInt;
		if (mant > max_norm) {
			// set the test bits
			test = 0B11;
			sign2 = num.sign;
			expo2 = num.expo;
			// TODO: this can be done with a mask.
			mant2 = mant % max_norm;
		}
		else {
			sign1 = num.sign;
			expo1 = num.expo;
			mant1 = mant;
		}
	}

	public Decimal toDecimal() {
		uint mant;
		int expo;
		bool sign;

		if (test == 0B11) {
			// check for special values
			if (sign2) {
				sign = true;
				mant = value & 0x7FFFFFFF;
			}
			else {
				sign = false;
				mant = value;
			}
			if (mant == inf || value > inf && value <= max_inf) {
				return Decimal(sign, "Inf", 0);
			}
			if (mant == qnan || value > qnan && value <= max_qnan) {
				return Decimal(sign, "qNaN", 0);
			}
			if (mant == snan || value > snan && value <= max_snan) {
				return Decimal(sign, "sNan", 0);
			}
			// number is finite, set msbs
			mant = mant2 | (0b100 << normBits);
			sign = sign2;
			expo = expo2 - bias;
		}
		else {
			mant = mant1;
			sign = sign1;
			expo = expo1 - bias;
		}
		return Decimal(sign, BigInt(mant), expo);
	}

	public string toString() {
 		string str = format("0x%08X",value);
		return str;
	}
}

unittest {
	Dec32 dec = Dec32();
	writefln("dec = ", dec);
	writefln("dec.mant1 = ", dec.mant1);

	Decimal num = Decimal(0);
	dec = Dec32(num);
	writeln("num = ", num);
	writeln("dec = ", dec);

	num = Decimal(1);
	dec = Dec32(num);
	writeln("num = ", num);
	writeln("dec = ", dec);

	num = Decimal(-1);
	dec = Dec32(num);
	writeln("num = ", num);
	writeln("dec = ", dec);
}
