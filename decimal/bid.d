/**
 * A D programming language implementation of the
 * General Decimal Arithmetic Specification,
 * Version 1.70, (25 March 2009).
 *
 * by Paul D. Anderson
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
**/

module decimal.bid;

import decimal.decimal;
import std.bigint;
import std.bitmanip;


struct Dec32 {

	private union {
		uint value;
		mixin (bitfields!(
			uint, "mant1", 23,
			uint, "expo1", 8,
			bool, "sign1", 1
		));
		mixin (bitfields!(
			uint, "mant2", 21,
			uint, "expo2", 8,
			uint, "test", 2,
			bool, "sign2", 1
		));
	}
	enum uint bias = 101,
			  mantBits = 23,
			  expoBits = 8,
			  testBits = 2,
			  signBits = 1;

	enum uint pos_sNaN     = 0x7E000000,
			  pos_sNaN_max = 0x7FFFFFFF,
			  neg_sNaN     = 0xFE000000,
			  neg_sNaN_max = 0xFFFFFFFF,

			  pos_qNaN     = 0x7C000000,
			  pos_qNaN_max = 0x7DFFFFFF,
			  neg_qNaN     = 0xFC000000,
			  neg_qNaN_max = 0xFDFFFFFF,

			  pos_inf      = 0x78000000,
			  pos_inf_max  = 0x7BFFFFFF,
			  neg_inf      = 0xF8000000,
			  neg_inf_max  = 0xFBFFFFFF;

	/**
	 * Creates a Decimal from this Dec32
	 */
	public this(Decimal num) {
		// check for special values
		if (num.isInfinite) {
			value = num.sign ? neg_inf : pos_inf;
			return;
		}
		if (num.isQuiet) {
			value = num.sign ? neg_qNaN : pos_qNaN;
			return;
		}
		if (num.isSignaling) {
			value = num.sign ? neg_sNaN : pos_sNaN;
			return;
		}
		// number is finite
		if (num.mant > (2 << (mantBits - 2)) - 1) {
			// modify the test bits
			test = 3;
			sign2 = num.sign;
			expo2 = num.expo;
			mant2 = cast(uint)(num.mant % (2 << 21));
		}
		else {
			sign1 = num.sign;
			expo1 = num.expo;
			mant1 = cast(uint)num.mant.toInt;
		}

	}

	public Decimal toDecimal() {
		long mant;
		int expo;
		bool sign;

		if (test == 3) {
			// check for special values
			if (sign2) {	// negative values
				if (value >= neg_inf && value <= neg_inf_max) {
					return Decimal(true, "Inf", 0);
				}
				if (value >= neg_qNaN && value <= neg_qNaN_max) {
					return Decimal(true, "qNaN", 0);
				}
				if (value >= neg_sNaN && value <= neg_sNaN_max) {
					return Decimal(true, "sNaN", 0);
				}
			}
			else {			// positive values
				if (value >= pos_inf && value <= pos_inf_max) {
					return Decimal(false, "Inf", 0);
				}
				if (value >= pos_qNaN && value <= pos_qNaN_max) {
					return Decimal(false, "qNaN", 0);
				}
				if (value >= pos_sNaN && value <= pos_sNaN_max) {
					return Decimal(false, "sNaN", 0);
				}
			}
			// number is finite
			mant = cast(long)mant2 | (0b100 << mantBits - testBits);
			sign = sign2;
			expo = expo2 - bias;
		}
		else {
			mant = cast(long) mant1;
			sign = sign1;
			expo = expo1 - bias;
		}
		if (sign) {
			mant = -mant;
		}
		return Decimal(mant, expo);
	}

}
