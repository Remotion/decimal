/**
 * A D programming language implementation of the
 * General Decimal Arithmetic Specification,
 * Version 1.70, (25 March 2009).
 *
 * by Paul D. Anderson
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
**/

module decimal.context;

import std.container;

//--------------------------
// DecimalContext struct
//--------------------------

/**
 * Enumeration of available rounding modes.
 */
public enum Rounding {
	HALF_EVEN,
	HALF_DOWN,
	HALF_UP,
	DOWN,
	UP,
	FLOOR,
	CEILING,
}

/**
 * Enumeration of available signals.
 */
public enum : ubyte {
 	 CLAMPED           = 0x01,
 	 DIVISION_BY_ZERO  = 0x02,
 	 INEXACT           = 0x04,
 	 INVALID_OPERATION = 0x08,
 	 OVERFLOW          = 0x10,
 	 ROUNDED           = 0x20,
 	 SUBNORMAL         = 0x40,
 	 UNDERFLOW         = 0x80
}

/**
 * Context for decimal mathematic operations
 */
public struct DecimalContext {

	private ubyte traps;
	private ubyte flags;
	Rounding mode = Rounding.HALF_EVEN;
	uint precision = 9;

	const DecimalContext dup() {
		DecimalContext copy;
		copy.traps = traps;
		copy.flags = flags;
		copy.mode = mode;
		copy.precision = precision;
		return copy;
	}

	/// smallest normalized exponent
	int eMin = -98;

	/// largest normalized exponent
	int eMax = 99;

	/// smallest non-normalized exponent
	const int eTiny() {
		return eMin - (precision - 1);
	}

	/// Sets (or resets?) the specified context flag(s).
	void setFlag(const ubyte flags, const bool value = true) {
		if (value) {
			this.flags |= flags;
			// TODO: if this flag is trapped an exception should be thrown.
		}
		// TODO: can the user reset single flags?
		else {
			this.flags &= !flags;
		}
	}

	/// Gets the value of the specified context flag.
	const bool getFlag(const ubyte flag) {
		return (this.flags & flag) == flag;
	}

	/// Clears all the context flags.
	void clearFlags() {
		flags = 0;
	}

	/// Sets or resets the specified context trap(s).
	void setTrap(const ubyte traps, const bool value = true) {
		if (value) {
			this.traps |= traps;
		}
		else {
			this.traps &= !traps;
		}
	}

	/// Gets the value of the specified context trap.
	const bool getTrap(const ubyte trap) {
		return (this.traps & trap) == trap;
	}

	/// Clears all the context traps.
	void clearTraps() {
		traps = 0;
	}

	void setBasic() {
		clearFlags;
		setFlag(!(INEXACT | ROUNDED | SUBNORMAL));
		precision = 9;
		mode = Rounding.HALF_UP;
	}

	void setExtended(uint precision) {
		clearFlags;
		clearTraps;
		this.precision = precision;
		mode = Rounding.HALF_EVEN;
	}

};	// end struct DecimalContext

// default context
public immutable DecimalContext DEFAULT_CONTEXT = DecimalContext();

//  stack
public struct Stack(T) {

	private	T[] stack;

	@property bool isEmpty() {
		return stack.length == 0;
	}
	@property ref T top() {
		return stack[$ - 1];
	}
	void push(T value) {
		stack ~= value;
	}
	T pop() {
		T value = top;
		stack.length = stack.length - 1;
		return value;
	}
}

//--------------------------
// End of DecimalContext struct
//--------------------------

